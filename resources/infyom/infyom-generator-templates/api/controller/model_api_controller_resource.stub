<?php

namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_API_REQUEST$\Create$MODEL_NAME$APIRequest;
use $NAMESPACE_API_REQUEST$\Update$MODEL_NAME$APIRequest;
use $NAMESPACE_API_RESOURCE$\$MODEL_NAME$Resource;
use $NAMESPACE_APP$\Http\Controllers\Controller;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use Illuminate\Http\Request;

/**
 * Class $MODEL_NAME$APIController
 * @package $NAMESPACE_API_CONTROLLER$
 */
class $MODEL_NAME$APIController extends Controller
{
    /**
     * Display a listing of the $MODEL_NAME$.
     * GET|HEAD /$MODEL_NAME_PLURAL_SNAKE$
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Support\Facades\Response
     */
    public function index(Request $request)
    {
        $query = $MODEL_NAME$::query();

        if ($request->get('skip')) {
            $query->skip($request->get('skip'));
        }
        if ($request->get('limit')) {
            $query->limit($request->get('limit'));
        }

        $$MODEL_NAME_PLURAL_CAMEL$ = $query->get();

        return response()->json([
            'message' => 'Successfully retrieved',
            'status' => 'success',
            'data' => $MODEL_NAME$Resource::collection($$MODEL_NAME_PLURAL_CAMEL$)
        ]);
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     * POST /$MODEL_NAME_PLURAL_SNAKE$
     *
     * @param \$NAMESPACE_REQUEST$\Create$MODEL_NAME$Request $request
     *
     * @return \Illuminate\Support\Facades\Response
     */
    public function store(Create$MODEL_NAME$APIRequest $request)
    {
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::create($request->validated());

        return response()->json([
            'message' => 'Successfully added',
            'status' => 'success',
            'data' => new $MODEL_NAME$Resource($$MODEL_NAME_CAMEL$)
        ]);
    }

    /**
     * Display the specified $MODEL_NAME$.
     * GET|HEAD /$MODEL_NAME_PLURAL_SNAKE$/{$id}
     *
     * @param $id
     *
     * @return \Illuminate\Support\Facades\Response
     */
    public function show($id)
    {
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return response()->json([
                'message' => 'Not found',
                'status' => 'error'
            ]);
        }

        return response()->json([
            'message' => 'Successfully retrieved',
            'status' => 'success',
            'data' => new $MODEL_NAME$Resource($$MODEL_NAME_CAMEL$)
        ]);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     * PUT/PATCH /$MODEL_NAME_PLURAL_SNAKE$/{$id}
     *
     * @param $id
     * @param \$NAMESPACE_REQUEST$\Update$MODEL_NAME$Request $request
     *
     * @return \Illuminate\Support\Facades\Response
     */
    public function update($id, Update$MODEL_NAME$APIRequest $request)
    {
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return response()->json([
                'message' => 'Not found',
                'status' => 'error'
            ]);
        }

        $$MODEL_NAME_CAMEL$->update($request->validated());

        return response()->json([
            'message' => 'Successfully updated',
            'status' => 'success',
            'data' => new $MODEL_NAME$Resource($$MODEL_NAME_CAMEL$)
        ]);
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     * DELETE /$MODEL_NAME_PLURAL_SNAKE$/{$id}
     *
     * @param $id
     *
     * @return \Illuminate\Support\Facades\Response
     */
    public function destroy($id)
    {
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return response()->json([
                'message' => 'Not found',
                'status' => 'error'
            ]);
        }

        $$MODEL_NAME_CAMEL$->delete();

        return response()->json([
            'message' => 'Successfully deleted',
            'status' => 'success'
        ]);
    }
}